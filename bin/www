#!/usr/bin/env node

// import dependencies
const app = require('../app');
const http = require('http');

// get port from environment variable
const port = normalizePort(process.env.PORT || 3001);
app.set('port', port);

// create the HTTP server
const server = http.createServer(app);

// listen on the specified port
server.listen(port, () => {
  console.log('==> API server is now listening on port ' + server.address().port);
});
server.on('error', onError);
server.on('listening', onListening);


// normalize port
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// event listener for http server error events
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error('==> ' + bind + ' requires elevated priveleges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error('==> ' + bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// event listener for http server listening event
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('==> Listening on ' + bind);
}